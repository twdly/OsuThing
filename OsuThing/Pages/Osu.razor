@page "/among"
@using OsuThing.Services
@using OsuThing.Models

@inject IHttpClientFactory ClientFactory

<PageTitle>osu! gaming time</PageTitle>
<h3>osu!</h3>
<p>Number of scores:</p>
<input type="text" @bind-value="_scoreCount" @bind-value:event="oninput"/>
<button @onclick="GetScores" disabled="@(_vexo == null || _scoreCount == null || _scoreCount <= 0)">Get scores</button>
<p>@_scoresMessage</p>
@if (_vexo == null)
{
    <p>Loading...</p>
}
@if (_scores != null)
{
    @foreach (var score in _scores)
    {
        <h1>@score.BeatmapSet!.Title</h1>
        @if (score.Pp == null)
        {
            <p>Accuracy of @score.GetRoundedAccuracy()% and max combo of @score.MaxCombo but no PP :(</p>
        }
        else
        {
            <p>Accuracy of @score.GetRoundedAccuracy()% and max combo of @score.MaxCombo for a PP value of @score.Pp</p>
        }
    } 
}

@code
{
    AuthenticationModel? _vexo;
    IEnumerable<ScoreModel>? _scores;
    string _scoresMessage = "";
    string _scoreType = "best";
    int? _scoreCount;

    protected override async Task OnInitializedAsync()
    {
        _vexo = await AuthenticationService.Authenticate();
    }

    private async void GetScores()
    {
        if (_vexo != null && _scoreCount != null)
        {
            _scores = await ScoreService.GetUserScores(ClientFactory, _vexo, "13047286", _scoreType, _scoreCount.Value);
        }
        if (_scores != null)
        {
            var foundScoreCount = _scores.Count();
            _scoresMessage = foundScoreCount == 0 ? "No scores have been found" : $"The {foundScoreCount} {_scoreType} scores have been found";
        }
        StateHasChanged();
    }
}