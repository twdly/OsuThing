@page "/among"
@using OsuThing.Services
@using OsuThing.Models

@inject IHttpClientFactory ClientFactory

<PageTitle>osu! gaming time</PageTitle>
<h2>osu!</h2>

<div class="user-input">
    <input type="text" @oninput="args => FindUser(args.Value?.ToString())"/>
    @if (_user is {Username: not null })
    {
        <p>Current user:</p>
        <a href="https://osu.ppy.sh/users/@_user.Id">
            <h4>@_user.Username</h4>
            <img src="@_user.Avatar" alt="Avatar for @_user.Username" class="avatar"/>
        </a>
    }
</div>
<div class="score-input">
    <p>Number of scores:</p>
    <input type="text" @bind-value="_scoreCount" @bind-value:event="oninput"/>
    <button @onclick="GetScores" disabled="@IsScoreButtonDisabled()">Get scores</button>
    <ul class="button-group">
        <button>Top</button>
        <button>Recent</button>
        <button>First</button>
    </ul>
    <p>@_scoresMessage</p>
</div>
@if (_authentication == null)
{
    <p>Loading...</p>
}
@if (_scores != null)
{
    @foreach (var score in _scores)
    {
        <div>
            <img src="@score.BeatmapSet!.Covers?.Cover" alt="Beatmap image for @score.BeatmapSet!.Title" class="cover-img"/>
            <h3>
                <a href="https://osu.ppy.sh/beatmapsets/@score.BeatmapSet!.Id/#osu/@score.Beatmap!.DiffId">@score.BeatmapSet!.Title
                    <span class="diffName"> - [@score.Beatmap.DiffName]</span>
                </a>
            </h3>
            <p>@score.Beatmap.Difficulty* (@score.GetModsAsString())</p>
            @if (score.Pp == null)
            {
                <p>Accuracy of @score.GetRoundedAccuracy()% and max combo of @score.MaxCombo but no PP :(</p>
            }
            else
            {
                <p>Accuracy of @score.GetRoundedAccuracy()% and max combo of @score.MaxCombo for a PP value of @score.Pp</p>
            }
        </div>
    } 
}

@code
{
    AuthenticationModel? _authentication;
    IEnumerable<ScoreModel>? _scores;
    UserModel? _user;
    string _scoresMessage = "";
    string _scoreType = "best";
    int? _scoreCount;

    protected override async Task OnInitializedAsync()
    {
        _authentication = await AuthenticationService.Authenticate();
    }

    private async void GetScores()
    {
        if (_authentication != null && _scoreCount != null && _user != null)
        {
            _scores = await ScoreService.GetUserScores(ClientFactory, _authentication, _user.Id.ToString(), _scoreType, _scoreCount.Value);
        }
        if (_scores != null)
        {
            var foundScoreCount = _scores.Count();
            _scoresMessage = foundScoreCount == 0 ? "No scores have been found" : $"The {foundScoreCount} {_scoreType} scores have been found";
        }
        StateHasChanged();
    }

    private async void FindUser(string? input)
    {
        if (_authentication != null && input != null)
        {
            _user = await UserService.FindUser(ClientFactory, _authentication, input);
        }
        StateHasChanged();
    }

    private bool IsScoreButtonDisabled()
    {
        return _authentication == null || _scoreCount == null || _scoreCount <= 0 || _user == null;
    }
}