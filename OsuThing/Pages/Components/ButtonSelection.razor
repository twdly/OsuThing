@typeparam TSelectionEnum where TSelectionEnum : Enum

<div class="selection-buttons">
    @if (!string.IsNullOrEmpty(Label))
    {
        <p>@Label:</p>
    }
    @foreach (var selection in ChoiceDict)
    {
        <button disabled="@(CurrentSelection?.Equals(selection.Key))" @onclick="async () => { await UpdateSelection(selection.Key); }">@selection.Value</button>
    }
</div>

@code 
{
    // This needs to be in the same file as @typeparam
    [Parameter] public required Dictionary<TSelectionEnum, string> ChoiceDict { get; set; }
    [Parameter] public required TSelectionEnum InitialSelection { get; set; }
    [Parameter] public required EventCallback<TSelectionEnum> SelectionCallback { get; set; }
    [Parameter] public string? Label { get; set; }
    private TSelectionEnum? CurrentSelection { get; set; }

    protected override Task OnInitializedAsync()
    {
        CurrentSelection = InitialSelection;
        return base.OnInitializedAsync();
    }

    private async Task UpdateSelection(TSelectionEnum selection)
    {
        CurrentSelection = selection;
        await SelectionCallback.InvokeAsync(selection);
    }
}